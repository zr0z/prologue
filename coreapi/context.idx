PathHandler	context.html#PathHandler	context: PathHandler	
Path	context.html#Path	context: Path	
RePath	context.html#RePath	context: RePath	
ReRouter	context.html#ReRouter	context: ReRouter	
ReversedRouter	context.html#ReversedRouter	context: ReversedRouter	
GlobalScope	context.html#GlobalScope	context: GlobalScope	
Context	context.html#Context	context: Context	
AsyncEvent	context.html#AsyncEvent	context: AsyncEvent	
SyncEvent	context.html#SyncEvent	context: SyncEvent	
Event	context.html#Event	context: Event	
HandlerAsync	context.html#HandlerAsync	context: HandlerAsync	
ErrorHandler	context.html#ErrorHandler	context: ErrorHandler	
ErrorHandlerTable	context.html#ErrorHandlerTable	context: ErrorHandlerTable	
UploadFile	context.html#UploadFile	context: UploadFile	
ptrnWildcard	context.html#ptrnWildcard	PatternMatchingType.ptrnWildcard	
ptrnParam	context.html#ptrnParam	PatternMatchingType.ptrnParam	
ptrnText	context.html#ptrnText	PatternMatchingType.ptrnText	
PatternMatchingType	context.html#PatternMatchingType	context: PatternMatchingType	
BasePatternNode	context.html#BasePatternNode	context: BasePatternNode	
PatternNode	context.html#PatternNode	context: PatternNode	
Router	context.html#Router	context: Router	
gScope	context.html#gScope,Context	context: gScope(ctx: Context): lent GlobalScope	
size	context.html#size,Context	context: size(ctx: Context): int8	
incSize	context.html#incSize,Context,int	context: incSize(ctx: Context; num = 1)	
first	context.html#first,Context	context: first(ctx: Context): bool	
first=	context.html#first=,Context,bool	context: first=(ctx: Context; first: bool)	
middlewares	context.html#middlewares,Context	context: middlewares(ctx: Context): lent seq[HandlerAsync]	
middlewares=	context.html#middlewares=,Context,seq[HandlerAsync]	context: middlewares=(ctx: Context; middlewares: seq[HandlerAsync])	
addMiddlewares	context.html#addMiddlewares,Context,HandlerAsync	context: addMiddlewares(ctx: Context; middleware: HandlerAsync)	
addMiddlewares	context.html#addMiddlewares,Context,seq[HandlerAsync]	context: addMiddlewares(ctx: Context; middleware: seq[HandlerAsync])	
execEvent	context.html#execEvent,Event	context: execEvent(event: Event)	
initUploadFile	context.html#initUploadFile,string,string	context: initUploadFile(filename, body: string): UploadFile	
getUploadFile	context.html#getUploadFile,Context,string	context: getUploadFile(ctx: Context; name: string): UploadFile	
save	context.html#save,UploadFile,string,string	context: save(uploadFile: UploadFile; dir: string; filename = &quot;&quot;)	
newErrorHandlerTable	context.html#newErrorHandlerTable	context: newErrorHandlerTable(initialSize = defaultInitialSize): ErrorHandlerTable	
newErrorHandlerTable	context.html#newErrorHandlerTable,openArray[]	context: newErrorHandlerTable(pairs: openArray[(HttpCode, ErrorHandler)]): ErrorHandlerTable	
newReversedRouter	context.html#newReversedRouter	context: newReversedRouter(): ReversedRouter	
initEvent	context.html#initEvent,AsyncEvent	context: initEvent(handler: AsyncEvent): Event	
initEvent	context.html#initEvent,SyncEvent	context: initEvent(handler: SyncEvent): Event	
newContext	context.html#newContext,Request,Response,GlobalScope	context: newContext(request: Request; response: Response; gScope: GlobalScope): Context	
newContext	context.html#newContext,Context,Context	context: newContext(ctx: Context; src: Context)	
newContextFrom	context.html#newContextFrom,Context,Context	context: newContextFrom(ctx: Context; src: Context)	
newContextTo	context.html#newContextTo,Context,Context	context: newContextTo(ctx: Context; src: Context)	
getSettings	context.html#getSettings,Context,string	context: getSettings(ctx: Context; key: string): JsonNode	
flash	context.html#flash,Context,string	context: flash(ctx: Context; msgs: string; category = FlashLevel.Info)	
flash	context.html#flash,Context,string,string	context: flash(ctx: Context; msgs: string; category: string)	
getFlashedMsgs	context.html#getFlashedMsgs,Context	context: getFlashedMsgs(ctx: Context): seq[string]	
getFlashedMsgsWithCategory	context.html#getFlashedMsgsWithCategory,Context	context: getFlashedMsgsWithCategory(ctx: Context): seq[(string, string)]	
getFlashedMsg	context.html#getFlashedMsg,Context,FlashLevel	context: getFlashedMsg(ctx: Context; category: FlashLevel): Option[string]	
getFlashedMsg	context.html#getFlashedMsg,Context,string	context: getFlashedMsg(ctx: Context; category: string): Option[string]	
respond	context.html#respond,Context,HttpCode,string,ResponseHeaders	context: respond(ctx: Context; code: HttpCode; body: string; headers: ResponseHeaders): Future[\n    void]	
respond	context.html#respond,Context	context: respond(ctx: Context): Future[void]	
respond	context.html#respond,Context,HttpCode,string	context: respond(ctx: Context; code: HttpCode; body: string): Future[void]	
send	context.html#send,Context,string	context: send(ctx: Context; content: string): Future[void]	
getCookie	context.html#getCookie,Context,string,string	context: getCookie(ctx: Context; key: string; default = &quot;&quot;): string	
setCookie	context.html#setCookie,Context,string,string,string,Option[int],string,string	context: setCookie(ctx: Context; key, value: string; expires = &quot;&quot;;\n          maxAge: Option[int] = none(int); domain = &quot;&quot;; path = &quot;&quot;;\n          secure = false; httpOnly = false; sameSite = Lax)	
setCookie	context.html#setCookie,Context,string,string,,Option[int],string,string	context: setCookie(ctx: Context; key, value: string; expires: DateTime | Time;\n          maxAge: Option[int] = none(int); domain = &quot;&quot;; path = &quot;&quot;;\n          secure = false; httpOnly = false; sameSite = Lax)	
deleteCookie	context.html#deleteCookie,Context,string,string,string	context: deleteCookie(ctx: Context; key: string; path = &quot;&quot;; domain = &quot;&quot;)	
defaultHandler	context.html#defaultHandler,Context	context: defaultHandler(ctx: Context): Future[void]	
default404Handler	context.html#default404Handler,Context	context: default404Handler(ctx: Context): Future[void]	
default500Handler	context.html#default500Handler,Context	context: default500Handler(ctx: Context): Future[void]	
getPostParams	context.html#getPostParams,Context,string,string	context: getPostParams(ctx: Context; key: string; default = &quot;&quot;): string	
getQueryParams	context.html#getQueryParams,Context,string,string	context: getQueryParams(ctx: Context; key: string; default = &quot;&quot;): string	
getPathParams	context.html#getPathParams,Context,string	context: getPathParams(ctx: Context; key: string): string	
getPathParams	context.html#getPathParams,Context,string,T	context: getPathParams[T: BaseType](ctx: Context; key: string; default: T): T	
getFormParams	context.html#getFormParams,Context,string,string	context: getFormParams(ctx: Context; key: string; default = &quot;&quot;): string	
setResponse	context.html#setResponse,Context,HttpCode,string	context: setResponse(ctx: Context; code: HttpCode; body = &quot;&quot;; version = HttpVer11)	
setResponse	context.html#setResponse,Context,Response	context: setResponse(ctx: Context; response: Response)	
urlFor	context.html#urlFor,Context,string,openArray[],openArray[]	context: urlFor(ctx: Context; handler: string;\n       parameters: openArray[(string, string)] = @[];\n       queryParams: openArray[(string, string)] = @[]; usePlus = true;\n       omitEq = true): string	
abortExit	context.html#abortExit,Context,string	context: abortExit(ctx: Context; code = Http401; body = &quot;&quot;;\n          headers = initResponseHeaders(); version = HttpVer11)	
attachment	context.html#attachment,Context,string,string	context: attachment(ctx: Context; downloadName: string; charset = &quot;utf-8&quot;)	
staticFileResponse	context.html#staticFileResponse,Context,string,string,string,string,string,int	context: staticFileResponse(ctx: Context; filename, dir: string; mimetype = &quot;&quot;;\n                   downloadName = &quot;&quot;; charset = &quot;utf-8&quot;; bufSize = 40960;\n                   headers = none(ResponseHeaders)): owned(Future[void])	
